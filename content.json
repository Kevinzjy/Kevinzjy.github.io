{"meta":{"title":"Kevinzjy's Blog","subtitle":"生信狗的个人小站","description":"Kevinzjy","author":"Jinyang Zhang","url":"https://kevinzjy.github.io"},"pages":[{"title":"","date":"2017-05-12T16:07:08.979Z","updated":"2017-03-24T16:23:21.000Z","comments":true,"path":"404.html","permalink":"https://kevinzjy.github.io/404.html","excerpt":"","text":""},{"title":"About","date":"2017-03-24T14:13:02.000Z","updated":"2017-03-26T10:18:03.000Z","comments":true,"path":"about/index.html","permalink":"https://kevinzjy.github.io/about/index.html","excerpt":"","text":"Stay hungry, Stay foolish Kevinzjy PKU 生科狗，UCAS搬砖ing E-MAIL: kevinzjy1997@gmail.com"},{"title":"Categories","date":"2017-03-24T15:57:01.000Z","updated":"2017-03-24T16:37:50.000Z","comments":false,"path":"categories/index.html","permalink":"https://kevinzjy.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-03-24T15:56:54.000Z","updated":"2017-03-24T16:21:36.000Z","comments":false,"path":"tags/index.html","permalink":"https://kevinzjy.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Bash on Ubuntu on Windows的安装和配置(一)","slug":"Install-WSL","date":"2017-05-12T15:26:40.000Z","updated":"2017-05-13T03:37:16.181Z","comments":true,"path":"2017/05/12/Install-WSL/","link":"","permalink":"https://kevinzjy.github.io/2017/05/12/Install-WSL/","excerpt":"记录一下Bash on Ubuntu on Windows的安装和配置过程参考官方说明 Step1: Bash on Ubuntu on Windows的下载和安装更新系统版本在 设置 -&gt; 系统 -&gt; 关于 中，查看系统版本号，系统必须为64位，版本号至少为14393.0，如果版本过低，检查更新至14393以上版本 打开开发者模式在 设置 -&gt; 更新和安全 -&gt; 针对开发人员 中，选中开发人员模式, 重启电脑 在 控制面板 -&gt; 程序 -&gt; 程序和功能 -&gt; 启动或关闭Windows功能 中，勾选适用于Linux的Windows子系统 打开命令行，输入bash,后”y”确认条款，下载完成后输入用户名和密码后，安装成功","text":"记录一下Bash on Ubuntu on Windows的安装和配置过程参考官方说明 Step1: Bash on Ubuntu on Windows的下载和安装更新系统版本在 设置 -&gt; 系统 -&gt; 关于 中，查看系统版本号，系统必须为64位，版本号至少为14393.0，如果版本过低，检查更新至14393以上版本 打开开发者模式在 设置 -&gt; 更新和安全 -&gt; 针对开发人员 中，选中开发人员模式, 重启电脑 在 控制面板 -&gt; 程序 -&gt; 程序和功能 -&gt; 启动或关闭Windows功能 中，勾选适用于Linux的Windows子系统 打开命令行，输入bash,后”y”确认条款，下载完成后输入用户名和密码后，安装成功 Step2: 更新Ubuntu版本检查Windows创意者更新，在Windows升级至1703版本后，WSL会自动升级至16.04 LTS 123# 手动查看Ubuntu版本号lsb_release -asudo do-release-upgrade # Manual upgrade to Ubuntu 16.04 Step3: 安装Ubuntu后进行的设置，参考Link: 新升级至Ubuntu 16.04 LTS后，打开Bash会提示 ‘To run a command as administrator (user “root”), use “sudo “.See “man sudo_root” for details.’，随便执行一个sudo命令，即可去掉该提示 1sudo -i 在Ubuntu升级后，sudo apt update可能会出现 “N: Ignoring file ‘50unattended-upgrades.ucf-dist’ in directory ‘/etc/apt/apt.conf.d/‘ as it has an invalid filename extension” 错误，将该旧版配置文件删除后 apt update 即可解决 1sudo rm /etc/apt/apt.conf.d/50unattended-upgrades.ucf-dist &amp;&amp; sudo apt update 默认系统中提示音非常烦人，可以通过配置 $HOME/.inputrc 去除 1echo \"set bell-style none\" &gt; $HOME/.inputrc Ubuntu中默认安装的Vim版本有BUG在Insert模式中不能识别方向键,可以通过卸载并重新安装Vim解决 12sudo apt remove vimsudo apt install vim 在执行需要联网的命令如apt时会提示 “sudo: unable to resolve host DESKTOP-2Q1PJM7”, 同时，在sudo apt update的时候会出现getaddrinfo.c错误: “../sysdeps/posix/getaddrinfo.c:2591: getaddrinfo: Assertion `(extension ({ const struct in6_addr __a = (const struct in6_addr ) (sin6-&gt;sin6_addr.in6_u.u6_addr32); a-&gt;in6_u.u6_addr32[0] == 0 &amp;&amp; a-&gt;in6_u.u6_addr32[1] == 0 &amp;&amp; a-&gt;in6_u.u6_addr32[2] == bswap_32 (0xffff); }))’ failed.” 123cat /etc/hostname # 查看本机hostnamesudo vi /etc/hosts127.0.0.1 DESKTOP-2Q1PJM7 # 改为你的hostname 安装Git1sudo apt install git 安装Cmder从官方网站下载Cmder，并在ConEmu下载ConEmu的更新，安装后覆盖至Cmder/vendor/conemu-maximus5，完成对ConEmu的更新 在Cmder中，直接运行Bash.exe时无法使用方向键。需要点击右下角 Settings -&gt; Startup -&gt; Tasks，新建任务 1C:\\Windows\\System32\\bash.exe ~ -cur_console:p:n # 直接进入~目录 即可在Bash中使用方向键, 如果使用 “-cur_console:p1” 会导致Vim中无法使用方向键 安装Bash-it对Bash环境进行美化在Windows 1703 创意者更新后，Cmder + zsh 环境配置下会出现光标前出现空格的Bug，目前暂未解决，因此使用Bash-it对默认的Bash环境进行美化 12git clone https://github.com/revans/bash-it.git ~/.bash_it~/.bash_it/install.sh 更改主题: 在 ~/.bashrc 中，把theme设为”simple”,然后安装常用的Monospace字体 12345export BASH_IT_THEME='simple' # 主题配置export SCM_CHECK=true # Git插件配置export SCM_GIT_SHOW_DETAILS=true export SCM_GIT_SHOW_MINIMAL_INFO=true # 防止Git提示符乱码 安装htop对系统进行监控1sudo apt install htop ###","categories":[{"name":"Windows","slug":"windows","permalink":"https://kevinzjy.github.io/categories/windows/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://kevinzjy.github.io/tags/Windows/"},{"name":"Bash on Ubuntu","slug":"Bash-on-Ubuntu","permalink":"https://kevinzjy.github.io/tags/Bash-on-Ubuntu/"}]},{"title":"利用Sra-tools从NCBI下载SRA数据","slug":"sratoolkit","date":"2017-05-12T07:56:45.000Z","updated":"2017-05-12T08:39:48.000Z","comments":true,"path":"2017/05/12/sratoolkit/","link":"","permalink":"https://kevinzjy.github.io/2017/05/12/sratoolkit/","excerpt":"Sra-tools的下载与安装Note: 旧版的Sratoolkit已经更新为Sra-tools 参考NCBI官方教程Wiki 12# Downloading SRA Toolkitwget \"http://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-centos_linux64.tar.gz\"","text":"Sra-tools的下载与安装Note: 旧版的Sratoolkit已经更新为Sra-tools 参考NCBI官方教程Wiki 12# Downloading SRA Toolkitwget \"http://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-centos_linux64.tar.gz\" 123# Unpacking the Toolkit tar zxvf sratoolkit.current-centos_linux64.tar.gzcd sratoolkit.2.8.2-1-centos_linux64 12# Add to $PATHexport PATH=[sratoolkit_path]:$PATH 12# Test sratoolkitfastq-dump -X 5 -Z SRR390728 12# Configure vdb-config -i 在vdb-config的图形界面里更改[Default Import Path]，最好不要放在用户$HOME目录下，否则SRA文件可能会导致用户目录占用空间当某些情况下，vdb-config可能不能打开图形化界面，可以手动在配置文件中指定SRA文件的储存位置 12# 手动指定sra_pathecho '/repository/user/main/public/root = \"[sra_path]\"' &gt; $HOME/.ncbi/user-settings.mkfg 如何下载SRA文件一般情况下，我们下载的是paired-end reads，而默认的fastq-dump会把read1,read2解压在同一文件中，我们需要手动指定–split-3来分别获得read1和read2 12# Download DRX033310_1.fastq.gz, DRX033310_2.fastq.gzfastq-dump --split-3 --gzip SRR390728","categories":[{"name":"Bioinformatics","slug":"Bioinformatics","permalink":"https://kevinzjy.github.io/categories/Bioinformatics/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://kevinzjy.github.io/tags/Linux/"},{"name":"Bioinfomatics","slug":"Bioinfomatics","permalink":"https://kevinzjy.github.io/tags/Bioinfomatics/"}]},{"title":"Ubuntu下部署NAS","slug":"nas","date":"2017-04-30T08:18:15.000Z","updated":"2017-05-12T08:35:34.000Z","comments":true,"path":"2017/04/30/nas/","link":"","permalink":"https://kevinzjy.github.io/2017/04/30/nas/","excerpt":"安装Ubuntu NAS","text":"安装Ubuntu NAS 开机自动挂载移动硬盘123sudo fdisk -lsudo umount /dev/sdb1sudo mkfs -t ext4 /dev/sdb1 使用bash-it 或者 zsh + oh-my-zsh123sudo apt updatesudo apt install zshsudo apt install git","categories":[{"name":"Linux","slug":"linux","permalink":"https://kevinzjy.github.io/categories/linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://kevinzjy.github.io/tags/Linux/"},{"name":"NAS","slug":"NAS","permalink":"https://kevinzjy.github.io/tags/NAS/"}]},{"title":"Python中的多进程","slug":"python-Multiprocessing","date":"2017-03-29T04:55:17.000Z","updated":"2017-03-29T05:17:04.000Z","comments":true,"path":"2017/03/29/python-Multiprocessing/","link":"","permalink":"https://kevinzjy.github.io/2017/03/29/python-Multiprocessing/","excerpt":"","text":"Python中的多进程使用 Multiprocessing进程池1234567891011from multiprocessing import Pooldef run_func(msg): print msgpool = Pool(4)jobs = []for i in range(4): jobs.append(pool.apply_async(run_func, (i, )))pool.close()pool.join() Multiprocessing线程池1234567891011from multiprocessing.dummpy import Pooldef run_func(msg): print msgpool = Pool(4)jobs = []for i in range(4): jobs.append(pool.apply_async(run_func, (i)))pool.close()pool.join()","categories":[],"tags":[]},{"title":"Linux服务器使用技巧","slug":"Linux-Tech","date":"2017-03-26T09:29:26.000Z","updated":"2017-03-26T10:11:18.000Z","comments":true,"path":"2017/03/26/Linux-Tech/","link":"","permalink":"https://kevinzjy.github.io/2017/03/26/Linux-Tech/","excerpt":"记录一下Linux服务器使用时的小技巧 防止错误删除或重命名文件12alias rm=&apos;rm -i&apos;alias mv=&apos;mv -i&apos;","text":"记录一下Linux服务器使用时的小技巧 防止错误删除或重命名文件12alias rm=&apos;rm -i&apos;alias mv=&apos;mv -i&apos;","categories":[{"name":"Linux","slug":"linux","permalink":"https://kevinzjy.github.io/categories/linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://kevinzjy.github.io/tags/Linux/"}]},{"title":"ggplot作图","slug":"ggplot","date":"2017-03-24T15:04:04.000Z","updated":"2017-04-26T14:23:26.000Z","comments":true,"path":"2017/03/24/ggplot/","link":"","permalink":"https://kevinzjy.github.io/2017/03/24/ggplot/","excerpt":"ggsci颜色设置1234567891011121314151617181920library(\"ggsci\")library(\"ggplot2\")library(\"gridExtra\")data(\"diamonds\")p1 = ggplot(subset(diamonds, carat &gt;= 2.2), aes(x = table, y = price, colour = cut)) + geom_point(alpha = 0.7) + geom_smooth(method = \"loess\", alpha = 0.05, size = 1, span = 1) + theme_bw()p2 = ggplot(subset(diamonds, carat &gt; 2.2 &amp; depth &gt; 55 &amp; depth &lt; 70), aes(x = depth, fill = cut)) + geom_histogram(colour = \"black\", binwidth = 1, position = \"dodge\") + theme_bw()p1_npg = p1 + scale_color_npg()p2_npg = p2 + scale_fill_npg()grid.arrange(p1_npg, p2_npg, ncol = 2)","text":"ggsci颜色设置1234567891011121314151617181920library(\"ggsci\")library(\"ggplot2\")library(\"gridExtra\")data(\"diamonds\")p1 = ggplot(subset(diamonds, carat &gt;= 2.2), aes(x = table, y = price, colour = cut)) + geom_point(alpha = 0.7) + geom_smooth(method = \"loess\", alpha = 0.05, size = 1, span = 1) + theme_bw()p2 = ggplot(subset(diamonds, carat &gt; 2.2 &amp; depth &gt; 55 &amp; depth &lt; 70), aes(x = depth, fill = cut)) + geom_histogram(colour = \"black\", binwidth = 1, position = \"dodge\") + theme_bw()p1_npg = p1 + scale_color_npg()p2_npg = p2 + scale_fill_npg()grid.arrange(p1_npg, p2_npg, ncol = 2) 1234mypal &lt;- pal_npg(\"nrc\", alpha=0.7)(9)library(scales)show_col(mypal) ggplot legend123456789get_legend &lt;- function(p) &#123; tmp &lt;- ggplot_gtable(ggplot_build(p)) leg &lt;- which(sapply(tmp$grobs, function(x) x$name) == \"guide-box\") legend &lt;- tmp$grobs[[leg]] return(legend)&#125;p1_legend &lt;- get_legend(p1)plot(p1_legend) ggplot transparencyggplot中，将plot存为eps格式可以更加方便地使用AI进行编辑 1ggsave(\"./plot.eps\", width=5, height=5) 但是默认的eps输出格式不能保存透明度，会出现报错 123Warning message:In grid.Call.graphics(L_rect, x$x, x$y, x$width, x$height, resolveHJust(x$just, : 此装置不支持半透明：每一页将被报告一次 此时 1ggsave(\"./F1B1.eps\", device=cairo_ps, width = 6, height = 10)","categories":[{"name":"R","slug":"R","permalink":"https://kevinzjy.github.io/categories/R/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://kevinzjy.github.io/tags/Linux/"},{"name":"R","slug":"R","permalink":"https://kevinzjy.github.io/tags/R/"}]},{"title":"在Linux服务器上安装GCC，Boost和Cmake","slug":"Install-c","date":"2017-03-24T13:46:27.000Z","updated":"2017-03-28T04:30:52.000Z","comments":true,"path":"2017/03/24/Install-c/","link":"","permalink":"https://kevinzjy.github.io/2017/03/24/Install-c/","excerpt":"GCC的安装下载gcc-6.3.01234cd /panfs/home/zhao/zhangjy/software/src/gcc_src/wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-6.3.0/gcc-6.3.0.tar.gztar zxvf gcc-6.3.0.tar.gzcd gcc-6.3.0 安装依赖的mpfr, gmp和mpc等依赖工具1./contrib/download_prerequisites","text":"GCC的安装下载gcc-6.3.01234cd /panfs/home/zhao/zhangjy/software/src/gcc_src/wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-6.3.0/gcc-6.3.0.tar.gztar zxvf gcc-6.3.0.tar.gzcd gcc-6.3.0 安装依赖的mpfr, gmp和mpc等依赖工具1./contrib/download_prerequisites 在新的目录下编译123mkdir -p /panfs/home/zhao/zhangjy/software/src/gcc_buildcd /panfs/home/zhao/zhangjy/software/src/gcc_build/panfs/home/zhao/zhangjy/software/src/gcc_src/gcc-6.3.0/configure --prefix=/panfs/home/zhao/zhangjy/software/gcc --disable-multilib 配置环境变量，去掉在\\$LD_LIBRARY_PATH和\\$LIBRARY_PATH变量中最后的’:’12export $LD_LIBRARY_PATH=/panfs/home/zhao/zhangjy/software/R/include:/panfs/home/zhao/zhangjy/software/R/lib:/public/software/mpi/openmpi-16-intel/lib:/public/software/intel/composer_xe_2011_sp1.7.256/compiler/lib/intel64:/public/software/intel/composer_xe_2011_sp1.7.256/mkl/lib/intel64:/opt/gridview//pbs/dispatcher/lib::/usr/local/lib64:/usr/local/libexport $LIBRARY_PATH=/public/software/intel/composer_xe_2011_sp1.7.256/compiler/lib/intel64:/public/software/intel/composer_xe_2011_sp1.7.256/mkl/lib/intel64 安装GCC12make -j 10 # make in 10 threadsmake install 添加新安装的GCC到环境变量12export PATH=/panfs/home/zhao/zhangjy/software/gcc/bin:$PATHexport LD_LIBRARY_PATH=/panfs/home/zhao/zhangjy/software/gcc/lib/gcc/x86_64-pc-linux-gnu/6.3.0:/panfs/home/zhao/zhangjy/software/gcc/lib64:$LD_LIBRARY_PATH 当安装其他软件时，指定调用新版的GCC123export CC=/panfs/home/zhao/zhangjy/software/gcc/bin/gccexport CXX=/panfs/home/zhao/zhangjy/software/gcc/bin/g++cmake $YOUR_PATH -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR Boost的安装下载Boost123wget https://nchc.dl.sourceforge.net/project/boost/boost/1.63.0/boost_1_63_0.tar.gztar zxvf boost_1_63_0.tar.gzcd boost_1_63_0 安装Boost1sh ./bootstrap.sh 指定boost安装目录和include, lib文件夹的位置1./bjam --prefix=/panfs/home/zhao/zhangjy/software/boost --includedir=/panfs/home/zhao/zhangjy/software/boost --libdir=/panfs/home/zhao/zhangjy/software/boost install 添加到环境变量12export PATH=/panfs/home/zhao/zhangjy/software/boost/boost:$PATHexport LD_LIBRARY_PATH=/panfs/home/zhao/zhangjy/software/boost/lib:$LD_LIBRARY_PATH 安装Cmake下载Cmake123wget https://cmake.org/files/v3.7/cmake-3.7.2.tar.gz --no-check-certificatetar zxvf cmake-3.7.2.tar.gzcd cmake-3.7.2 安装Cmake12./bootstrap --prefix=/panfs/home/zhao/zhangjy/software/cmakegmake","categories":[{"name":"Linux","slug":"linux","permalink":"https://kevinzjy.github.io/categories/linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://kevinzjy.github.io/tags/Linux/"},{"name":"C++","slug":"C","permalink":"https://kevinzjy.github.io/tags/C/"}]},{"title":"在Windows下使用Github pages + Hexo 搭建个人博客","slug":"Install-hexo","date":"2017-03-24T13:16:34.000Z","updated":"2017-05-12T09:08:11.000Z","comments":true,"path":"2017/03/24/Install-hexo/","link":"","permalink":"https://kevinzjy.github.io/2017/03/24/Install-hexo/","excerpt":"依赖工具在Windows下安装Git + Node.js + Cmder 安装Git下载Git，下载地址安装时选择添加Git到$PATH 配置Cmder安装Cmder, 在Cmder中添加{git bash}: 12Task parameters: /icon \"C:\\Program Files\\Git\\git-bash.exe\"Commands: \"C:\\Program Files\\Git\\bin\\sh.exe\" --login -i","text":"依赖工具在Windows下安装Git + Node.js + Cmder 安装Git下载Git，下载地址安装时选择添加Git到$PATH 配置Cmder安装Cmder, 在Cmder中添加{git bash}: 12Task parameters: /icon \"C:\\Program Files\\Git\\git-bash.exe\"Commands: \"C:\\Program Files\\Git\\bin\\sh.exe\" --login -i 安装Node.js下载Node.js, 下载地址 安装Hexo123456789101112npm install hexo-cli -gmkdir -p /c/Users/kevin/Dropbox/git/Kevinzjy.github.iocd /c/Users/kevin/Dropbox/git/Kevinzjy.github.iohexo initnpm installnpm install hexo-deployer-git --save #安装git插件hexo clean hexo g # generate hexo s # start 编辑_congif.yml 1234deploy: type: git repo: git@github.com:Kevinzjy/Kevinzjy.github.io.git branch: master deploy到github 1hexo d # deployment 当出现warning: LD will be replaced by CRLF in …时，删除hexo文件夹下面的.deplo_git文件夹 1git config --global core.autocrlf false Hexo主题配置12git clone https://github.com/iissnan/hexo-theme-next themes/nextrm -rf ./themes/next/.git # 删除.git目录，防止github build时出错 编辑_config.yml，将theme改为next NexT主题配置坑 附：Ubuntu中安装nodejs123wget https://nodejs.org/dist/v6.10.3/node-v6.10.3-linux-x64.tar.xztar xvf node-v6.10.3-linux-x64.tar.xzmv node-v6.10.3-linux-x64 ../node-v6.10.3 编辑.zshrc文件，加入nodejs的路径 12export PATH=/home/zhangjy/software/node-v6.10.3/bin:$PATHnpm install hexo-cli -g","categories":[{"name":"Windows","slug":"windows","permalink":"https://kevinzjy.github.io/categories/windows/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://kevinzjy.github.io/tags/Windows/"},{"name":"Github","slug":"Github","permalink":"https://kevinzjy.github.io/tags/Github/"}]},{"title":"在Linux服务器上安装R","slug":"Install-R","date":"2017-03-24T12:08:28.000Z","updated":"2017-03-26T10:11:08.000Z","comments":true,"path":"2017/03/24/Install-R/","link":"","permalink":"https://kevinzjy.github.io/2017/03/24/Install-R/","excerpt":"设置环境变量12export R_HOME=/panfs/home/zhao/zhangjy/software/Rexport R_SRC=/panfs/home/zhao/zhangjy/pacakges 安装Dependencieszlib123456cd $R_SRCwget https://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gztar zxvf zlib-1.2.11.tar.gzcd zlib-1.2.11 ./configure --prefix=$R_HOMEmake &amp;&amp; make install","text":"设置环境变量12export R_HOME=/panfs/home/zhao/zhangjy/software/Rexport R_SRC=/panfs/home/zhao/zhangjy/pacakges 安装Dependencieszlib123456cd $R_SRCwget https://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gztar zxvf zlib-1.2.11.tar.gzcd zlib-1.2.11 ./configure --prefix=$R_HOMEmake &amp;&amp; make install bzip212345cd $R_SRCwget http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz -O ./bzip2-1.0.6.tar.gztar zxvf bzip2-1.0.6.tar.gzcd bzip2make &amp;&amp; make install PREFIX=$R_HOME liblzma123456cd $R_SRCwget http://tukaani.org/xz/xz-5.2.3.tar.gz tar zxvf xz-5.2.3.tar.gzcd xz-5.2.3./configure --prefix=$R_HOMEmake &amp;&amp; make install pcre123456cd $R_SRCwget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.40.tar.gztar zxvf pcre-8.40.tar.gzcd pcre-8.40./configure --enable-utf8 --prefix=$R_HOMEmake &amp;&amp; make install libcurl123456cd $R_SRCwget --no-check-certificate https://curl.haxx.se/download/curl-7.53.1.tar.gztar zxvf curl-7.53.1.tar.gzcd curl-7.53.1./configure --prefix=$R_HOMEmake &amp;&amp; make install 配置R安装环境1234export LD_LIBRARY_PATH=$R_HOME/include:$LD_LIBRARY_PATHexport PATH=$R_HOME/bin:$PATHexport CFLAGS=\"-I$R_HOME/include\"export LDFLAGS=\"-L$R_HOME/lib\" 编译和安装R123456cd $R_SRCwget https://mirrors.tuna.tsinghua.edu.cn/CRAN/src/base/R-3/R-3.3.3.tar.gztar zxvf R-3.3.3.tar.gzcd R-3.3.3./configure --prefix=$R_HOMEmake &amp;&amp; make install 修改.zshrc或者.bashrc在rc文件中增加如下内容 12export PATH=/panfs/home/zhao/zhangjy/software/R/bin:$PATHexport LD_LIBRARY_PATH=R_HOME=/panfs/home/zhao/zhangjy/software/R/lib:$LIBRARY_PATH","categories":[{"name":"Linux","slug":"linux","permalink":"https://kevinzjy.github.io/categories/linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://kevinzjy.github.io/tags/Linux/"},{"name":"R","slug":"R","permalink":"https://kevinzjy.github.io/tags/R/"}]}]}