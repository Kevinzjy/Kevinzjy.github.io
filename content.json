{"meta":{"title":"Kevinzjy's Blog","subtitle":"生信狗的个人小站","description":"Kevinzjy","author":"Jinyang Zhang","url":"https://kevinzjy.github.io"},"pages":[{"title":"","date":"2017-03-24T21:41:45.000Z","updated":"2017-03-24T16:23:21.000Z","comments":true,"path":"404.html","permalink":"https://kevinzjy.github.io/404.html","excerpt":"","text":""},{"title":"About","date":"2017-03-24T14:13:02.000Z","updated":"2017-03-26T10:18:03.000Z","comments":true,"path":"about/index.html","permalink":"https://kevinzjy.github.io/about/index.html","excerpt":"","text":"Stay hungry, Stay foolish Kevinzjy PKU 生科狗，UCAS搬砖ing E-MAIL: kevinzjy1997@gmail.com"},{"title":"Categories","date":"2017-03-24T15:57:01.000Z","updated":"2017-03-24T16:37:50.000Z","comments":false,"path":"categories/index.html","permalink":"https://kevinzjy.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2017-03-24T15:56:54.000Z","updated":"2017-03-24T16:21:36.000Z","comments":false,"path":"tags/index.html","permalink":"https://kevinzjy.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"第一次审稿经验","slug":"Manuscript-review","date":"2017-05-14T08:34:42.000Z","updated":"2017-05-14T09:52:47.000Z","comments":true,"path":"2017/05/14/Manuscript-review/","link":"","permalink":"https://kevinzjy.github.io/2017/05/14/Manuscript-review/","excerpt":"记录一下第一次审稿的经历233","text":"记录一下第一次审稿的经历233 前言最近在Briefings in Bioinformatics(BIB)上以二作身份和师兄发表了一篇文章（其实我啥也没做，就跑了几个软件= =)，然后投稿的时候注册了BIB的账号。不记得当时是不是选了啥选项，文章发表不就后就收到了一篇文章的Review Invitaion(没准是我们老板懒得申推荐给学生了)，反正在咨询老板后，选择了Agreed 在网站上重复确认后，会收到一封邮件 审稿过程在提交Review的页面，主要分为两大部分 Recommendation Accept: 接收，得多好的文章才能直接接收 = = Minor Revision: 需要较小改动， Major Revision: 需要较大改动，个人觉得可能一般遇到的都是这 Reject: 毫不留情，直接拒绝 Comments 这部分是主要对文章的评价部分,分为两小部分: Confidential Comments to the Editors: Use this space to transfer to the Editor the basis of your recommendation for acceptance or rejection. These comments will NOT be conveyed to the author. 直接对编辑说的话，并不会发送给作者，一般不用写(可能是用来写狠话的233) Comments to the Author: Use this space to convery specific feedback to the author on your recommendation. Please do NOT reference the Comments to Editor field as the author will not have direct access to those comments. 直接发送给作者的修改意见，在这部分，一般包括两部分： 对文章内容的大致总结归纳和审稿者对文章的总体评价 分条列出对文章中内容的修改意见 在填写好意见后，可以提交也可以暂时保存为草稿，最后提交审稿意见后，同样会收到提示邮件。 小插曲这次BIB审稿给了两周，中间正好遇到课题上比较忙，在写好这篇文章的审稿之后，还去问了老板，让老板补充了几条意见。最后写好的时候，已经过了给的截止日期了…… 其实中间还收到了两个 Gentle Reminder, 然而发邮件提醒也是拯救不了本拖延症患者的 于是在DDL最后一天给Editor发邮件申请拖到周末再提交Review 然后收到了编辑的回复 Not a problem. 看来大家都是拖延症，编辑已经习惯了:) P.S. 已经收到了编辑发给作者的Decision letter，现在坐等作者的Revision了","categories":[{"name":"Academic Life","slug":"Academic-Life","permalink":"https://kevinzjy.github.io/categories/Academic-Life/"}],"tags":[{"name":"Academic","slug":"Academic","permalink":"https://kevinzjy.github.io/tags/Academic/"}]},{"title":"MAC下使用Dropbox同步更新Hexo博客","slug":"OSX-Dropbox+Hexo","date":"2017-05-14T07:25:13.000Z","updated":"2017-05-14T08:30:30.000Z","comments":true,"path":"2017/05/14/OSX-Dropbox+Hexo/","link":"","permalink":"https://kevinzjy.github.io/2017/05/14/OSX-Dropbox+Hexo/","excerpt":"在Mac上许多配置与Linux系统不大相同","text":"在Mac上许多配置与Linux系统不大相同 OS X上Hexo博客的搭建本人使用Dropbox同步Github pages目录，这样可以随时随地在设备上编辑博客并更新 在实际使用中，Ubuntu / Windows (Git bash) / Windows (WSL) 中使用Hexo十分完美，但是在OS X上，遇到了几个小问题 Dropbox在OS X中无法实时同步在Mac上修改文件，Windows下面会立即同步文件的更新, 但是反过来，Win下修改文件后，Mac下的Dropbox没有任何反应，必须要关闭后重新打开Dropbox才能开始同步 目前从官网下载了最新版本。。。过一段时间测试一下。 Hexo deploy的时候提示Error: Cannot find module &#39;./build/Release/DTraceProviderBindings&#39;在Mac上，使用Nodejs安装了Hexo之后hexo deploy时，会出现上述报错，可能是因为Hexo版本过低，或者插件没有安装完全 1234npm install hexo --no-optional# 如果仍然不行npm uninstall hexo-cli -gnpm install hexo-cli -g","categories":[{"name":"MAC","slug":"MAC","permalink":"https://kevinzjy.github.io/categories/MAC/"},{"name":"Hexo","slug":"MAC/Hexo","permalink":"https://kevinzjy.github.io/categories/MAC/Hexo/"}],"tags":[{"name":"MAC","slug":"MAC","permalink":"https://kevinzjy.github.io/tags/MAC/"},{"name":"Hexo","slug":"Hexo","permalink":"https://kevinzjy.github.io/tags/Hexo/"}]},{"title":"Bash on Ubuntu on Windows的安装和配置 (二) Ubuntu软件推荐","slug":"Ubuntu-softwares","date":"2017-05-13T15:02:26.000Z","updated":"2017-05-14T08:30:59.000Z","comments":true,"path":"2017/05/13/Ubuntu-softwares/","link":"","permalink":"https://kevinzjy.github.io/2017/05/13/Ubuntu-softwares/","excerpt":"记录一些Ubuntu上工具的安装和使用 Htop: 增强版的Top命令1sudo apt install htop Glances: 全面监控你的系统状态1sudo pip install glances[action,browser,cloud,cpuinfo,chart,docker,export,folders,gpu,ip,raid,snmp,web,wifi]","text":"记录一些Ubuntu上工具的安装和使用 Htop: 增强版的Top命令1sudo apt install htop Glances: 全面监控你的系统状态1sudo pip install glances[action,browser,cloud,cpuinfo,chart,docker,export,folders,gpu,ip,raid,snmp,web,wifi] Axe: 好用的多线程下载工具12sudo apt install axelaxel -n 4 -o ./ url 附: 常用软件包在apt中的名称 Description Name pip (for python 2.7) python-pip pip (for python 3) python3-pip","categories":[{"name":"Linux","slug":"linux","permalink":"https://kevinzjy.github.io/categories/linux/"},{"name":"Software","slug":"linux/Software","permalink":"https://kevinzjy.github.io/categories/linux/Software/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://kevinzjy.github.io/tags/Windows/"},{"name":"Bash on Ubuntu","slug":"Bash-on-Ubuntu","permalink":"https://kevinzjy.github.io/tags/Bash-on-Ubuntu/"},{"name":"Software","slug":"Software","permalink":"https://kevinzjy.github.io/tags/Software/"}]},{"title":"Windows下实现脚本开机自动启动","slug":"Windows-Autostart","date":"2017-05-13T04:21:52.000Z","updated":"2017-05-14T08:31:15.000Z","comments":true,"path":"2017/05/13/Windows-Autostart/","link":"","permalink":"https://kevinzjy.github.io/2017/05/13/Windows-Autostart/","excerpt":"实现Windows下程序的开机启动 如何实现Snipaste和自定义Hotkey的脚本开机自动启动在Windows资源管理器 -&gt; 查看 -&gt; 隐藏的项目，选中后，打开路径 C:\\Users\\kevin\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup 将需要开机自动启动的脚本放在这里即可","text":"实现Windows下程序的开机启动 如何实现Snipaste和自定义Hotkey的脚本开机自动启动在Windows资源管理器 -&gt; 查看 -&gt; 隐藏的项目，选中后，打开路径 C:\\Users\\kevin\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup 将需要开机自动启动的脚本放在这里即可","categories":[{"name":"Windows","slug":"windows","permalink":"https://kevinzjy.github.io/categories/windows/"},{"name":"Tips","slug":"windows/Tips","permalink":"https://kevinzjy.github.io/categories/windows/Tips/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://kevinzjy.github.io/tags/Windows/"}]},{"title":"Python使用Tips","slug":"Python-Tips","date":"2017-05-13T03:40:59.000Z","updated":"2017-05-14T08:30:28.000Z","comments":true,"path":"2017/05/13/Python-Tips/","link":"","permalink":"https://kevinzjy.github.io/2017/05/13/Python-Tips/","excerpt":"","text":"Python 使用过程中的特殊技巧坑 12import osimport sys","categories":[{"name":"Python","slug":"python","permalink":"https://kevinzjy.github.io/categories/python/"},{"name":"Tips","slug":"python/Tips","permalink":"https://kevinzjy.github.io/categories/python/Tips/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://kevinzjy.github.io/tags/Python/"}]},{"title":"Bash on Ubuntu on Windows的安装和配置 (一) WSL的安装和配置","slug":"Install-WSL","date":"2017-05-12T15:26:40.000Z","updated":"2017-05-14T08:49:55.000Z","comments":true,"path":"2017/05/12/Install-WSL/","link":"","permalink":"https://kevinzjy.github.io/2017/05/12/Install-WSL/","excerpt":"记录基本的 Bash on Ubuntu on Windows (WSL) 的安装和配置过程参考官方说明 Step1: Bash on Ubuntu on Windows的下载和安装更新系统版本在 设置 -&gt; 系统 -&gt; 关于 中，查看系统版本号，系统必须为64位，版本号至少为14393.0，如果版本过低，检查更新至14393以上版本 打开开发者模式在 设置 -&gt; 更新和安全 -&gt; 针对开发人员 中，选中开发人员模式, 重启电脑 在 控制面板 -&gt; 程序 -&gt; 程序和功能 -&gt; 启动或关闭Windows功能 中，勾选适用于Linux的Windows子系统 打开命令行，输入bash, 阅读条款后输入”y”确认条款，下载安装Ubuntu sub system。安装完成后输入用户名和密码后，安装成功","text":"记录基本的 Bash on Ubuntu on Windows (WSL) 的安装和配置过程参考官方说明 Step1: Bash on Ubuntu on Windows的下载和安装更新系统版本在 设置 -&gt; 系统 -&gt; 关于 中，查看系统版本号，系统必须为64位，版本号至少为14393.0，如果版本过低，检查更新至14393以上版本 打开开发者模式在 设置 -&gt; 更新和安全 -&gt; 针对开发人员 中，选中开发人员模式, 重启电脑 在 控制面板 -&gt; 程序 -&gt; 程序和功能 -&gt; 启动或关闭Windows功能 中，勾选适用于Linux的Windows子系统 打开命令行，输入bash, 阅读条款后输入”y”确认条款，下载安装Ubuntu sub system。安装完成后输入用户名和密码后，安装成功 Step2: 更新Ubuntu版本检查Windows创意者更新，在Windows升级至1703版本后，WSL会自动升级至16.04 LTS 123# 手动查看Ubuntu版本号lsb_release -asudo do-release-upgrade # Manual upgrade to Ubuntu 16.04 Step3: 安装Ubuntu后进行的设置，参考: 新升级至Ubuntu 16.04 LTS后，打开Bash会提示 ‘To run a command as administrator (user “root”), use “sudo “. See “man sudo_root” for details.’，随便执行一个sudo命令，即可去掉该提示 1sudo -i 在Ubuntu升级后，sudo apt update可能会出现 “N: Ignoring file ‘50unattended-upgrades.ucf-dist’ in directory ‘/etc/apt/apt.conf.d/‘ as it has an invalid filename extension” 错误，将该旧版配置文件删除后 sudo apt update 即可解决 1sudo rm /etc/apt/apt.conf.d/50unattended-upgrades.ucf-dist &amp;&amp; sudo apt update 默认系统中提示音非常烦人，可以通过配置 $HOME/.inputrc 去除 1echo \"set bell-style none\" &gt; $HOME/.inputrc Ubuntu中默认安装的Vim版本有BUG在Insert模式中不能识别方向键,可以通过卸载并重新安装Vim解决 12sudo apt remove vimsudo apt install vim 去掉Vim中烦人的提示音 1echo \":set vb t_vb=\" &gt; $HOME/.vimrc 在执行需要联网的命令如apt时会提示 “sudo: unable to resolve host DESKTOP-2Q1PJM7”, 同时，在sudo apt update的时候会出现getaddrinfo.c错误: “../sysdeps/posix/getaddrinfo.c:2591: getaddrinfo: Assertion `(extension ({ const struct in6_addr __a = (const struct in6_addr ) (sin6-&gt;sin6_addr.in6_u.u6_addr32); a-&gt;in6_u.u6_addr32[0] == 0 &amp;&amp; a-&gt;in6_u.u6_addr32[1] == 0 &amp;&amp; a-&gt;in6_u.u6_addr32[2] == bswap_32 (0xffff); }))’ failed.” 123cat /etc/hostname # 查看本机hostnamesudo vi /etc/hosts127.0.0.1 DESKTOP-2Q1PJM7 # 改为你的hostname Note：目前我还没解决第二个Assertion报错，但是遇到报错时重复运行多次命令可以暂时解决 WSL系统中的文件在Windows下无法读取，但是Windows的磁盘分区已经自动挂载，如 C:/ -&gt; /mnt/c ，可以通过创建软链接的方式便于访问Windows下的文件 12ln -s /mnt/c Cln -s /mnt/d D 安装Git1sudo apt install git 这里我在Github上面设置了ssh-key登录 12ssh-keygen # 生产ssh-key后把pub key内容复制到github设置中git config --global user.email \"kevinzjy1997@gmail.com\" # 配置github账户 安装Cmder从官方网站下载Cmder，并在ConEmu下载ConEmu的更新，安装后覆盖至Cmder/vendor/conemu-maximus5，完成对ConEmu的更新 在Cmder中，直接运行Bash.exe时无法使用方向键。需要点击右下角 Settings -&gt; Startup -&gt; Tasks，新建任务 1C:\\Windows\\System32\\bash.exe ~ -cur_console:p:n # 直接进入~目录 即可在Bash中使用方向键, 如果使用 -cur_console:p1 会导致Vim中无法使用方向键 安装Bash-it对Bash环境进行美化在Windows 1703 创意者更新后，Cmder + zsh 环境配置下会出现光标前出现空格的Bug，目前暂未解决，因此使用Bash-it对默认的Bash环境进行美化 12git clone https://github.com/revans/bash-it.git ~/.bash_it~/.bash_it/install.sh 更改主题: 在 ~/.bashrc 中，把theme设为”simple” 12345678export BASH_IT_THEME='simple' # 主题配置export SCM_CHECK=true # Git插件配置export SCM_GIT_SHOW_DETAILS=true export SCM_GIT_SHOW_MINIMAL_INFO=true # 防止Git提示符乱码export TERM=xterm-256color # 设置Terminal类型，支持256色LC_ALL=en_US.UTF-8 安装X-server用来运行图形化程序默认情况下，WSL不能直接运行图形化程序，可以通过安装X-server并监听端口的方式解决 1export DISPLAY=:0 # 写入 .bashrc, 可以省去每次打开Bash后输入的麻烦 在Windows下，安装VcXsrv，运行VcXsrv监听:0端口 1Rstudio # 即可在Windows下启动Rstudio的图形化界面 不过用这种方法，打开的图形化界面太丑陋了，不能直视啊。。。 Tips: WSL系统内可以直接运行Windows命令1sublime_text.exe # 启动sublime text 但是不能在命令行直接对Linux下的文件进行编辑，应该是因为传递的文件名参数问题。这点其实可以通过一些方法解决，但是目前还没有这方面需求，懒得折腾了。。。 安装完这些，基本就可以在命令行和Bash on Ubuntu on Windows愉快地玩耍了~ Enjoy!","categories":[{"name":"Windows","slug":"windows","permalink":"https://kevinzjy.github.io/categories/windows/"},{"name":"Bash on Ubuntu","slug":"windows/Bash-on-Ubuntu","permalink":"https://kevinzjy.github.io/categories/windows/Bash-on-Ubuntu/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://kevinzjy.github.io/tags/Windows/"},{"name":"Bash on Ubuntu","slug":"Bash-on-Ubuntu","permalink":"https://kevinzjy.github.io/tags/Bash-on-Ubuntu/"}]},{"title":"利用Sra-tools从NCBI下载SRA数据","slug":"Bioinfo-Sratools","date":"2017-05-12T07:56:45.000Z","updated":"2017-05-14T08:27:32.000Z","comments":true,"path":"2017/05/12/Bioinfo-Sratools/","link":"","permalink":"https://kevinzjy.github.io/2017/05/12/Bioinfo-Sratools/","excerpt":"Sra-tools的下载与安装Note: 旧版的Sratoolkit已经更新为Sra-tools 参考NCBI官方教程Wiki 12# Downloading SRA Toolkitwget \"http://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-centos_linux64.tar.gz\"","text":"Sra-tools的下载与安装Note: 旧版的Sratoolkit已经更新为Sra-tools 参考NCBI官方教程Wiki 12# Downloading SRA Toolkitwget \"http://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-centos_linux64.tar.gz\" 123# Unpacking the Toolkit tar zxvf sratoolkit.current-centos_linux64.tar.gzcd sratoolkit.2.8.2-1-centos_linux64 12# Add to $PATHexport PATH=[sratoolkit_path]:$PATH 12# Test sratoolkitfastq-dump -X 5 -Z SRR390728 12# Configure vdb-config -i 在vdb-config的图形界面里更改[Default Import Path]，最好不要放在用户$HOME目录下，否则SRA文件可能会导致用户目录占用空间当某些情况下，vdb-config可能不能打开图形化界面，可以手动在配置文件中指定SRA文件的储存位置 12# 手动指定sra_pathecho '/repository/user/main/public/root = \"[sra_path]\"' &gt; $HOME/.ncbi/user-settings.mkfg 如何下载SRA文件一般情况下，我们下载的是paired-end reads，而默认的fastq-dump会把read1,read2解压在同一文件中，我们需要手动指定–split-3来分别获得read1和read2 12# Download DRX033310_1.fastq.gz, DRX033310_2.fastq.gzfastq-dump --split-3 --gzip SRR390728","categories":[{"name":"Bioinformatics","slug":"Bioinformatics","permalink":"https://kevinzjy.github.io/categories/Bioinformatics/"},{"name":"Tools","slug":"Bioinformatics/Tools","permalink":"https://kevinzjy.github.io/categories/Bioinformatics/Tools/"}],"tags":[{"name":"Bioinfomatics","slug":"Bioinfomatics","permalink":"https://kevinzjy.github.io/tags/Bioinfomatics/"},{"name":"Linux","slug":"Linux","permalink":"https://kevinzjy.github.io/tags/Linux/"},{"name":"Bioinformatic-Tools","slug":"Bioinformatic-Tools","permalink":"https://kevinzjy.github.io/tags/Bioinformatic-Tools/"}]},{"title":"Ubuntu下部署NAS","slug":"Linux-NAS","date":"2017-04-30T08:18:15.000Z","updated":"2017-05-14T08:28:20.000Z","comments":true,"path":"2017/04/30/Linux-NAS/","link":"","permalink":"https://kevinzjy.github.io/2017/04/30/Linux-NAS/","excerpt":"安装Ubuntu NAS","text":"安装Ubuntu NAS 开机自动挂载移动硬盘123sudo fdisk -lsudo umount /dev/sdb1sudo mkfs -t ext4 /dev/sdb1 使用bash-it 或者 zsh + oh-my-zsh123sudo apt updatesudo apt install zshsudo apt install git","categories":[{"name":"Linux","slug":"linux","permalink":"https://kevinzjy.github.io/categories/linux/"},{"name":"NAS","slug":"linux/NAS","permalink":"https://kevinzjy.github.io/categories/linux/NAS/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://kevinzjy.github.io/tags/Linux/"},{"name":"NAS","slug":"NAS","permalink":"https://kevinzjy.github.io/tags/NAS/"}]},{"title":"Python中的多进程","slug":"Python-Multiprocessing","date":"2017-03-29T04:55:17.000Z","updated":"2017-05-14T08:30:29.000Z","comments":true,"path":"2017/03/29/Python-Multiprocessing/","link":"","permalink":"https://kevinzjy.github.io/2017/03/29/Python-Multiprocessing/","excerpt":"","text":"Python中的多进程使用 Multiprocessing进程池1234567891011from multiprocessing import Pooldef run_func(msg): print msgpool = Pool(4)jobs = []for i in range(4): jobs.append(pool.apply_async(run_func, (i, )))pool.close()pool.join() Multiprocessing线程池1234567891011from multiprocessing.dummpy import Pooldef run_func(msg): print msgpool = Pool(4)jobs = []for i in range(4): jobs.append(pool.apply_async(run_func, (i)))pool.close()pool.join()","categories":[{"name":"Python","slug":"python","permalink":"https://kevinzjy.github.io/categories/python/"},{"name":"Multiprocessing","slug":"python/Multiprocessing","permalink":"https://kevinzjy.github.io/categories/python/Multiprocessing/"}],"tags":[{"name":"Python","slug":"Python","permalink":"https://kevinzjy.github.io/tags/Python/"}]},{"title":"Linux服务器使用技巧","slug":"Linux-Tips","date":"2017-03-26T09:29:26.000Z","updated":"2017-05-14T08:28:47.000Z","comments":true,"path":"2017/03/26/Linux-Tips/","link":"","permalink":"https://kevinzjy.github.io/2017/03/26/Linux-Tips/","excerpt":"记录一下Linux服务器使用时的小技巧 防止错误删除或重命名文件12alias rm=&apos;rm -i&apos;alias mv=&apos;mv -i&apos;","text":"记录一下Linux服务器使用时的小技巧 防止错误删除或重命名文件12alias rm=&apos;rm -i&apos;alias mv=&apos;mv -i&apos;","categories":[{"name":"Linux","slug":"linux","permalink":"https://kevinzjy.github.io/categories/linux/"},{"name":"Tips","slug":"linux/Tips","permalink":"https://kevinzjy.github.io/categories/linux/Tips/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://kevinzjy.github.io/tags/Linux/"},{"name":"Server","slug":"Server","permalink":"https://kevinzjy.github.io/tags/Server/"}]},{"title":"ggplot2作图","slug":"Bioinfo-ggplot2","date":"2017-03-24T15:04:04.000Z","updated":"2017-05-14T08:29:13.000Z","comments":true,"path":"2017/03/24/Bioinfo-ggplot2/","link":"","permalink":"https://kevinzjy.github.io/2017/03/24/Bioinfo-ggplot2/","excerpt":"ggsci颜色设置1234567891011121314151617181920library(\"ggsci\")library(\"ggplot2\")library(\"gridExtra\")data(\"diamonds\")p1 = ggplot(subset(diamonds, carat &gt;= 2.2), aes(x = table, y = price, colour = cut)) + geom_point(alpha = 0.7) + geom_smooth(method = \"loess\", alpha = 0.05, size = 1, span = 1) + theme_bw()p2 = ggplot(subset(diamonds, carat &gt; 2.2 &amp; depth &gt; 55 &amp; depth &lt; 70), aes(x = depth, fill = cut)) + geom_histogram(colour = \"black\", binwidth = 1, position = \"dodge\") + theme_bw()p1_npg = p1 + scale_color_npg()p2_npg = p2 + scale_fill_npg()grid.arrange(p1_npg, p2_npg, ncol = 2)","text":"ggsci颜色设置1234567891011121314151617181920library(\"ggsci\")library(\"ggplot2\")library(\"gridExtra\")data(\"diamonds\")p1 = ggplot(subset(diamonds, carat &gt;= 2.2), aes(x = table, y = price, colour = cut)) + geom_point(alpha = 0.7) + geom_smooth(method = \"loess\", alpha = 0.05, size = 1, span = 1) + theme_bw()p2 = ggplot(subset(diamonds, carat &gt; 2.2 &amp; depth &gt; 55 &amp; depth &lt; 70), aes(x = depth, fill = cut)) + geom_histogram(colour = \"black\", binwidth = 1, position = \"dodge\") + theme_bw()p1_npg = p1 + scale_color_npg()p2_npg = p2 + scale_fill_npg()grid.arrange(p1_npg, p2_npg, ncol = 2) 1234mypal &lt;- pal_npg(\"nrc\", alpha=0.7)(9)library(scales)show_col(mypal) ggplot legend123456789get_legend &lt;- function(p) &#123; tmp &lt;- ggplot_gtable(ggplot_build(p)) leg &lt;- which(sapply(tmp$grobs, function(x) x$name) == \"guide-box\") legend &lt;- tmp$grobs[[leg]] return(legend)&#125;p1_legend &lt;- get_legend(p1)plot(p1_legend) ggplot transparencyggplot2 中，将 plot 存为 eps 格式可以更加方便地使用 AI 进行编辑 1ggsave(\"./plot.eps\", width=5, height=5) 但是默认的 eps 输出格式不能保存透明度，会出现报错 123Warning message:In grid.Call.graphics(L_rect, x$x, x$y, x$width, x$height, resolveHJust(x$just, : 此装置不支持半透明：每一页将被报告一次 此时可以使用 ggsave 中指定设备为 cairo_ps 1ggsave(\"./F1B1.eps\", device=cairo_ps, width = 6, height = 10) 或者直接使用 cairo_ps 保存图片 123cairo_ps(\"./F1B1.eps\")print(f1b1_plot)dev.off()","categories":[{"name":"Bioinformatics","slug":"Bioinformatics","permalink":"https://kevinzjy.github.io/categories/Bioinformatics/"},{"name":"R","slug":"Bioinformatics/R","permalink":"https://kevinzjy.github.io/categories/Bioinformatics/R/"}],"tags":[{"name":"Bioinfomatics","slug":"Bioinfomatics","permalink":"https://kevinzjy.github.io/tags/Bioinfomatics/"},{"name":"R","slug":"R","permalink":"https://kevinzjy.github.io/tags/R/"},{"name":"ggplot2","slug":"ggplot2","permalink":"https://kevinzjy.github.io/tags/ggplot2/"}]},{"title":"在Linux服务器上安装GCC，Boost和Cmake","slug":"Install-gcc","date":"2017-03-24T13:46:27.000Z","updated":"2017-05-14T08:29:42.000Z","comments":true,"path":"2017/03/24/Install-gcc/","link":"","permalink":"https://kevinzjy.github.io/2017/03/24/Install-gcc/","excerpt":"GCC的安装下载gcc-6.3.01234cd /panfs/home/zhao/zhangjy/software/src/gcc_src/wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-6.3.0/gcc-6.3.0.tar.gztar zxvf gcc-6.3.0.tar.gzcd gcc-6.3.0 安装依赖的mpfr, gmp和mpc等依赖工具1./contrib/download_prerequisites","text":"GCC的安装下载gcc-6.3.01234cd /panfs/home/zhao/zhangjy/software/src/gcc_src/wget http://ftp.tsukuba.wide.ad.jp/software/gcc/releases/gcc-6.3.0/gcc-6.3.0.tar.gztar zxvf gcc-6.3.0.tar.gzcd gcc-6.3.0 安装依赖的mpfr, gmp和mpc等依赖工具1./contrib/download_prerequisites 在新的目录下编译123mkdir -p /panfs/home/zhao/zhangjy/software/src/gcc_buildcd /panfs/home/zhao/zhangjy/software/src/gcc_build/panfs/home/zhao/zhangjy/software/src/gcc_src/gcc-6.3.0/configure --prefix=/panfs/home/zhao/zhangjy/software/gcc --disable-multilib 配置环境变量，去掉在\\$LD_LIBRARY_PATH和\\$LIBRARY_PATH变量中最后的’:’12export $LD_LIBRARY_PATH=/panfs/home/zhao/zhangjy/software/R/include:/panfs/home/zhao/zhangjy/software/R/lib:/public/software/mpi/openmpi-16-intel/lib:/public/software/intel/composer_xe_2011_sp1.7.256/compiler/lib/intel64:/public/software/intel/composer_xe_2011_sp1.7.256/mkl/lib/intel64:/opt/gridview//pbs/dispatcher/lib::/usr/local/lib64:/usr/local/libexport $LIBRARY_PATH=/public/software/intel/composer_xe_2011_sp1.7.256/compiler/lib/intel64:/public/software/intel/composer_xe_2011_sp1.7.256/mkl/lib/intel64 安装GCC12make -j 10 # make in 10 threadsmake install 添加新安装的GCC到环境变量12export PATH=/panfs/home/zhao/zhangjy/software/gcc/bin:$PATHexport LD_LIBRARY_PATH=/panfs/home/zhao/zhangjy/software/gcc/lib/gcc/x86_64-pc-linux-gnu/6.3.0:/panfs/home/zhao/zhangjy/software/gcc/lib64:$LD_LIBRARY_PATH 当安装其他软件时，指定调用新版的GCC123export CC=/panfs/home/zhao/zhangjy/software/gcc/bin/gccexport CXX=/panfs/home/zhao/zhangjy/software/gcc/bin/g++cmake $YOUR_PATH -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR Boost的安装下载Boost123wget https://nchc.dl.sourceforge.net/project/boost/boost/1.63.0/boost_1_63_0.tar.gztar zxvf boost_1_63_0.tar.gzcd boost_1_63_0 安装Boost1sh ./bootstrap.sh 指定boost安装目录和include, lib文件夹的位置1./bjam -j 4 --prefix=/panfs/home/zhao/zhangjy/software/boost --includedir=/panfs/home/zhao/zhangjy/software/boost --libdir=/panfs/home/zhao/zhangjy/software/boost install 添加到环境变量12export PATH=/panfs/home/zhao/zhangjy/software/boost/boost:$PATHexport LD_LIBRARY_PATH=/panfs/home/zhao/zhangjy/software/boost/lib:$LD_LIBRARY_PATH 安装Cmake下载Cmake123wget https://cmake.org/files/v3.7/cmake-3.7.2.tar.gz --no-check-certificatetar zxvf cmake-3.7.2.tar.gzcd cmake-3.7.2 安装Cmake12./bootstrap --prefix=/panfs/home/zhao/zhangjy/software/cmakegmake","categories":[{"name":"Server","slug":"Server","permalink":"https://kevinzjy.github.io/categories/Server/"},{"name":"Software","slug":"Server/Software","permalink":"https://kevinzjy.github.io/categories/Server/Software/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://kevinzjy.github.io/tags/Linux/"},{"name":"Server","slug":"Server","permalink":"https://kevinzjy.github.io/tags/Server/"},{"name":"Software","slug":"Software","permalink":"https://kevinzjy.github.io/tags/Software/"}]},{"title":"在Windows下使用Github pages + Hexo搭建个人博客","slug":"Install-hexo","date":"2017-03-24T13:16:34.000Z","updated":"2017-05-14T08:28:55.000Z","comments":true,"path":"2017/03/24/Install-hexo/","link":"","permalink":"https://kevinzjy.github.io/2017/03/24/Install-hexo/","excerpt":"依赖工具在Windows下安装Git + Node.js + Cmder 安装Git下载Git，下载地址安装时选择添加Git到$PATH 配置Cmder安装Cmder, 在Cmder中添加{git bash}: 12Task parameters: /icon \"C:\\Program Files\\Git\\git-bash.exe\"Commands: \"C:\\Program Files\\Git\\bin\\sh.exe\" --login -i","text":"依赖工具在Windows下安装Git + Node.js + Cmder 安装Git下载Git，下载地址安装时选择添加Git到$PATH 配置Cmder安装Cmder, 在Cmder中添加{git bash}: 12Task parameters: /icon \"C:\\Program Files\\Git\\git-bash.exe\"Commands: \"C:\\Program Files\\Git\\bin\\sh.exe\" --login -i 安装Node.js下载Node.js, 下载地址 安装Hexo123456789101112npm install hexo-cli -gmkdir -p /c/Users/kevin/Dropbox/git/Kevinzjy.github.iocd /c/Users/kevin/Dropbox/git/Kevinzjy.github.iohexo initnpm installnpm install hexo-deployer-git --save #安装git插件hexo clean hexo g # generate hexo s # start 编辑_congif.yml 1234deploy: type: git repo: git@github.com:Kevinzjy/Kevinzjy.github.io.git branch: master deploy到github 1hexo d # deployment 当出现warning: LD will be replaced by CRLF in …时，删除hexo文件夹下面的.deplo_git文件夹 1git config --global core.autocrlf false Hexo主题配置12git clone https://github.com/iissnan/hexo-theme-next themes/nextrm -rf ./themes/next/.git # 删除.git目录，防止github build时出错 编辑_config.yml，将theme改为next NexT主题配置坑 附：Ubuntu中安装nodejs123wget https://nodejs.org/dist/v6.10.3/node-v6.10.3-linux-x64.tar.xztar xvf node-v6.10.3-linux-x64.tar.xzmv node-v6.10.3-linux-x64 ../node-v6.10.3 编辑.zshrc文件，加入nodejs的路径 12export PATH=/home/zhangjy/software/node-v6.10.3/bin:$PATHnpm install hexo-cli -g","categories":[{"name":"Windows","slug":"windows","permalink":"https://kevinzjy.github.io/categories/windows/"},{"name":"Hexo","slug":"windows/Hexo","permalink":"https://kevinzjy.github.io/categories/windows/Hexo/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://kevinzjy.github.io/tags/Windows/"},{"name":"Software","slug":"Software","permalink":"https://kevinzjy.github.io/tags/Software/"},{"name":"Blog","slug":"Blog","permalink":"https://kevinzjy.github.io/tags/Blog/"}]},{"title":"在Linux服务器上安装R","slug":"Install-R","date":"2017-03-24T12:08:28.000Z","updated":"2017-05-14T08:29:44.000Z","comments":true,"path":"2017/03/24/Install-R/","link":"","permalink":"https://kevinzjy.github.io/2017/03/24/Install-R/","excerpt":"设置环境变量12export R_HOME=/panfs/home/zhao/zhangjy/software/Rexport R_SRC=/panfs/home/zhao/zhangjy/pacakges 安装Dependencieszlib123456cd $R_SRCwget https://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gztar zxvf zlib-1.2.11.tar.gzcd zlib-1.2.11 ./configure --prefix=$R_HOMEmake &amp;&amp; make install","text":"设置环境变量12export R_HOME=/panfs/home/zhao/zhangjy/software/Rexport R_SRC=/panfs/home/zhao/zhangjy/pacakges 安装Dependencieszlib123456cd $R_SRCwget https://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.11/zlib-1.2.11.tar.gztar zxvf zlib-1.2.11.tar.gzcd zlib-1.2.11 ./configure --prefix=$R_HOMEmake &amp;&amp; make install bzip212345cd $R_SRCwget http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz -O ./bzip2-1.0.6.tar.gztar zxvf bzip2-1.0.6.tar.gzcd bzip2make &amp;&amp; make install PREFIX=$R_HOME liblzma123456cd $R_SRCwget http://tukaani.org/xz/xz-5.2.3.tar.gz tar zxvf xz-5.2.3.tar.gzcd xz-5.2.3./configure --prefix=$R_HOMEmake &amp;&amp; make install pcre123456cd $R_SRCwget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.40.tar.gztar zxvf pcre-8.40.tar.gzcd pcre-8.40./configure --enable-utf8 --prefix=$R_HOMEmake &amp;&amp; make install libcurl123456cd $R_SRCwget --no-check-certificate https://curl.haxx.se/download/curl-7.53.1.tar.gztar zxvf curl-7.53.1.tar.gzcd curl-7.53.1./configure --prefix=$R_HOMEmake &amp;&amp; make install 配置R安装环境1234export LD_LIBRARY_PATH=$R_HOME/include:$LD_LIBRARY_PATHexport PATH=$R_HOME/bin:$PATHexport CFLAGS=\"-I$R_HOME/include\"export LDFLAGS=\"-L$R_HOME/lib\" 编译和安装R123456cd $R_SRCwget https://mirrors.tuna.tsinghua.edu.cn/CRAN/src/base/R-3/R-3.3.3.tar.gztar zxvf R-3.3.3.tar.gzcd R-3.3.3./configure --prefix=$R_HOMEmake &amp;&amp; make install 修改.zshrc或者.bashrc在rc文件中增加如下内容 12export PATH=/panfs/home/zhao/zhangjy/software/R/bin:$PATHexport LD_LIBRARY_PATH=R_HOME=/panfs/home/zhao/zhangjy/software/R/lib:$LIBRARY_PATH","categories":[{"name":"Server","slug":"Server","permalink":"https://kevinzjy.github.io/categories/Server/"},{"name":"Software","slug":"Server/Software","permalink":"https://kevinzjy.github.io/categories/Server/Software/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://kevinzjy.github.io/tags/Linux/"},{"name":"R","slug":"R","permalink":"https://kevinzjy.github.io/tags/R/"}]}]}